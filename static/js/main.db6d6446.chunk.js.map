{"version":3,"sources":["components/MineSweeperInputNumber.tsx","components/SelectDifficulty.tsx","components/MineSweeper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MineSweeperInputNumber","props","value","setValue","min","Infinity","max","step","updateValue","Number","isNaN","useEffect","className","onClick","onChange","e","target","SelectDifficulty","useState","isShowCustomize","setIsShowCustomize","width","setWidth","height","setHeight","mineCount","setMineCount","showGame","panelButton2Style","MineSweeper","reStart","init","selectDifficulty","handleContextMenu","event","preventDefault","state","isEnd","mines","openStatus","markStatus","neighourMineCount","selectedMineCount","prevProps","prevState","this","play","every","isMine","index","setState","alert","total","Array","fill","i","start","length","randomIndex","Math","floor","random","tmp","shuffle","result","y","x","j","newX","k","newY","calcNeighbourMineCount","slice","floodfill","row","icon","push","key","handleClickLeft","onContextMenu","handleClickRight","renderMines","style","React","PureComponent","App","isShowGame","setIsShowGame","setmineCount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db6d6446.chunk.js","sourcesContent":["\r\nimport React, { useEffect} from 'react'\r\nimport './MineSweeperInputNumber.css';\r\n\r\ninterface MineSweeperInputNumberProps{\r\n    value:number;\r\n    setValue:(val:number)=>void;\r\n    min?:number;\r\n    max?:number;\r\n    step?:number;\r\n}\r\n\r\nexport default function MineSweeperInputNumber(props:MineSweeperInputNumberProps){\r\n    const { value,setValue,min=-Infinity,max=-Infinity,step=1} = props\r\n\r\n    function updateValue(value:number){\r\n        if(Number.isNaN(value)||value>max||value<min){\r\n            return \r\n        }\r\n        setValue(value)\r\n    }\r\n    useEffect(()=>{\r\n        if(value>max){\r\n            setValue(max)\r\n        }\r\n        if(value<min){\r\n            setValue(min)\r\n        }\r\n    },[min,max,value,setValue])\r\n\r\n    return (\r\n        <div className=\"input-group\">\r\n\r\n            <div className=\"input-group-addon\"\r\n             onClick={()=>updateValue(value-step)}\r\n            >-</div>\r\n            <input \r\n            className=\"form-control\"\r\n            value={props.value}\r\n            onChange={(e)=>updateValue(Number(e.target.value))}/>\r\n            <div\r\n             className=\"input-group-addon\"\r\n             onClick={()=>updateValue(value+step)}\r\n            >\r\n            +\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {\r\n    useState, \r\n} from 'react';\r\nimport './SelectDifficulty.css';\r\nimport MineSweeperInputNumber from './MineSweeperInputNumber';\r\n\r\ninterface SelectDifficultyProps{\r\n    showGame:(width:number,height:number,mineCount:number)=>void;\r\n}\r\n\r\nexport default function SelectDifficulty(props:SelectDifficultyProps){\r\n    const [\r\n        isShowCustomize,setIsShowCustomize,\r\n    ] = useState(false);\r\n    const [\r\n        width,setWidth,\r\n    ] = useState(30);\r\n    const [\r\n        height,setHeight,\r\n    ] = useState(16);\r\n    const [\r\n        mineCount,setMineCount,\r\n    ] = useState(99);\r\n\r\n    return (\r\n        <div className=\"app-section select-difficulty\">\r\n            <div className={`select-difficulty-container ${isShowCustomize?'show-customize':''}`}>\r\n                <div className=\"select-difficulty-section\">\r\n                    <div className=\"select-difficulty-row\">\r\n                        <div\r\n                            className=\"select-difficulty-item\"\r\n                            onClick={()=>props.showGame(8,8,10)}\r\n                        >\r\n                            <div>8 x 8</div>\r\n                            <div>10 个雷</div>\r\n                        </div>\r\n                        <div\r\n                            className=\"select-difficulty-item\"\r\n                            onClick={()=>props.showGame(16,16,40)}\r\n                        >\r\n                            <div>16 x 16</div>\r\n                            <div>40 个雷</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"select-difficulty-row\">\r\n                        <div\r\n                            className=\"select-difficulty-item\"\r\n                            onClick={()=>props.showGame(30,16,99)}\r\n                        >\r\n                            <div>30 x 16</div>\r\n                            <div>99 个雷</div>\r\n                        </div>\r\n                        <div\r\n                            className=\"select-difficulty-item\"\r\n                            onClick={()=>setIsShowCustomize(true)}\r\n                        >\r\n                            <div>?</div>\r\n                            <div>自定义</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"select-difficulty-section\">\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-label\">\r\n                                宽度\r\n                            </label>\r\n                            <MineSweeperInputNumber\r\n                                value={width}\r\n                                setValue={setWidth}\r\n                                max={50}\r\n                                min={1}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-label\">\r\n                                高度\r\n                            </label>\r\n                            <MineSweeperInputNumber\r\n                                value={height}\r\n                                setValue={setHeight}\r\n                                max={50}\r\n                                min={1}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label className=\"form-label\">\r\n                                雷数\r\n                            </label>\r\n                            <MineSweeperInputNumber\r\n                                value={mineCount}\r\n                                setValue={setMineCount}\r\n                                max={width*height}\r\n                                min={1}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <button\r\n                                className=\"mine-sweeper-button\"\r\n                                onClick={()=>props.showGame(width,height,mineCount)}\r\n                            >\r\n                                玩游戏\r\n                            </button>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <button\r\n                                className=\"mine-sweeper-button\"\r\n                                onClick={()=>setIsShowCustomize(false)}\r\n                            >\r\n                                取消\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport \"./MineSweeper.css\"\r\ninterface MineSweeperProps{\r\n    selectDifficulty:()=>void;\r\n    play:boolean;\r\n    width:number;\r\n    height:number;\r\n    mineCount:number;\r\n}\r\ninterface MineSweeperState{\r\n    isEnd:boolean;\r\n    mines:Array<number>;\r\n    openStatus:Array<number>;\r\n    markStatus:Array<number>;\r\n    neighourMineCount:Array<number>;\r\n    selectedMineCount:number;\r\n}\r\nfunction shuffle<T>(mines:Array<T>,start:number):void{\r\n    for(let i =1; i<mines.length;i++){\r\n        const randomIndex = Math.floor(Math.random()*(i+1))\r\n        const tmp = mines[randomIndex];\r\n        mines[randomIndex] = mines[i];\r\n        mines[i] = tmp;\r\n    }\r\n}\r\nfunction floodfill(\r\n    x:number,\r\n    y:number,\r\n    openStatus:Array<number>,\r\n    width:number,\r\n    height:number,\r\n    neighourMineCount:Array<number>\r\n):void{\r\n    if(x<0||y<0||x === height || y ===width){\r\n        return \r\n    }\r\n    const index = x*width +y;\r\n    if(openStatus[index] ===1){\r\n        return;\r\n    }\r\n    openStatus[index] =1;\r\n    if(neighourMineCount[index]>0){\r\n        return\r\n    }\r\n    for(let i = -1;i<2;i++){\r\n        for(let j =-1;j<2;j++){\r\n            floodfill(x+i,y+j,openStatus,width,height,neighourMineCount)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction calcNeighbourMineCount(width:number,height:number,mines:Array<number>):Array<number>{\r\n    const result = new Array(mines.length).fill(0);\r\n    for(let i =0; i<result.length;i++){\r\n        if(!mines[i]){\r\n            continue;\r\n        }\r\n        const y = i%width;\r\n        const x = (i-y)/width;\r\n        for(let j = -1; j<2 ;j++){\r\n            const newX = x+j\r\n            if(newX<0||newX === height){\r\n                continue\r\n            }\r\n            for (let k = -1; k < 2; k++) {\r\n                const newY = y + k;\r\n                if (newY < 0 || newY ===width) {\r\n                    continue;\r\n                }\r\n                result[newX*width+newY]++;\r\n           }\r\n        \r\n     \r\n            \r\n            \r\n        \r\n    }\r\n}\r\n    return result\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n const panelButton2Style={\r\n     'marginTop':'15px'\r\n }\r\nexport default class MineSweeper extends React.PureComponent<MineSweeperProps,MineSweeperState>{\r\n    constructor(props:MineSweeperProps){\r\n        super(props);\r\n        this.state={\r\n            isEnd:false,\r\n            mines:[],\r\n            openStatus:[],\r\n            markStatus:[],\r\n            neighourMineCount:[],\r\n            selectedMineCount:0\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps:MineSweeperProps,prevState:MineSweeperState){\r\n        if(this.props.play&&!prevProps.play){\r\n            this.init(this.props.width,this.props.height,this.props.mineCount)\r\n        }\r\n\r\n        if(this.state.selectedMineCount!==prevState.selectedMineCount&&this.state.selectedMineCount === this.props.mineCount){\r\n            const match = this.state.mines.every((isMine,index)=>{\r\n                if((isMine&&this.state.markStatus[index]===1)||(!isMine&&this.state.markStatus[index]!==1)){\r\n                    return true;\r\n                }\r\n                else{\r\n                    return false;\r\n                }\r\n                \r\n            })\r\n            if(match){\r\n                this.setState({\r\n                    isEnd:true\r\n                },()=>{\r\n                    alert('win')\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n   reStart =()=>{\r\n       const {\r\n           width,\r\n           height,\r\n           mineCount\r\n       } = this.props;\r\n       this.init(width,height,mineCount)\r\n   }\r\n   selectDifficulty=()=>{\r\n       this.props.selectDifficulty();\r\n   }\r\n\r\n    init(width:number,height:number,mineCount:number):void{\r\n        const total = width*height;\r\n        const mines = new Array(total).fill(0);\r\n        for (let i =0;i<mineCount;i++){\r\n            mines[i]=1;\r\n        }\r\n        shuffle<number>(mines,mineCount);\r\n        const neighourMineCount = calcNeighbourMineCount(width,height,mines)\r\n        this.setState({\r\n            isEnd:false,\r\n            mines,\r\n            openStatus:new Array(total).fill(0),\r\n            markStatus:new Array(total).fill(0),\r\n            neighourMineCount,\r\n            selectedMineCount:0,\r\n        })\r\n    }\r\n    handleClickLeft(x:number,y:number):void{\r\n        if(this.state.isEnd){\r\n            return;\r\n        }\r\n        const index = x*this.props.width+y;\r\n        if(this.state.openStatus[index]===1||this.state.markStatus[index] ===1){\r\n            return;\r\n        }\r\n        if(this.state.mines[index]){\r\n            const openStatus = this.state.openStatus.slice(0);\r\n            openStatus[index] =1;\r\n            this.setState({\r\n                isEnd:true,\r\n                openStatus,\r\n            },()=>{\r\n                alert('mine');\r\n            }\r\n            );\r\n            return\r\n        }\r\n        const openStatus = this.state.openStatus.slice(0);\r\n        floodfill(x,y,openStatus,this.props.width,this.props.height,this.state.neighourMineCount);\r\n        this.setState({\r\n            openStatus,\r\n        });\r\n    }\r\n    handleClickRight(x:number,y:number):void{\r\n        if(this.state.isEnd){\r\n            return\r\n        }\r\n        const index = x*this.props.width+y;\r\n        if(this.state.openStatus[index]===1){\r\n            return\r\n        }\r\n        const markStatus = this.state.markStatus.slice(0);\r\n        markStatus[index] = (markStatus[index]+1)%3;\r\n        let selectedMineCount = this.state.selectedMineCount;\r\n        if(markStatus[index] ===2){\r\n            selectedMineCount--;\r\n        }else if(markStatus[index] ===1){\r\n            selectedMineCount++\r\n        }\r\n        this.setState({\r\n            markStatus,\r\n            selectedMineCount\r\n        })\r\n    }\r\n    handleContextMenu =(event:React.MouseEvent)=>{\r\n        event.preventDefault();\r\n    }\r\n    renderMines(){\r\n        const mines=[];\r\n        for(let i =0; i<this.props.height;i++){\r\n            const row =[];\r\n            for(let j =0;j<this.props.width;j++){\r\n                const index = i*this.props.width+j;\r\n                let icon =null;\r\n                if(this.state.markStatus[index]===1){\r\n                    icon =(\r\n                        <i className=\"iconfont icon-qizi\"></i>\r\n                    );\r\n                }else if(this.state.markStatus[index]===2){\r\n                    icon =(\r\n                        <i className=\"iconfont icon-wenhao\"></i>\r\n                    )\r\n                }else if(this.state.openStatus[index] === 1){\r\n                    if(this.state.mines[index]){\r\n                        icon = (\r\n                            <i className=\"iconfont icon-dilei\"></i>\r\n                        );\r\n                    }else if(this.state.neighourMineCount[index]>0){\r\n                        icon = (\r\n                            <span>\r\n                                {this.state.neighourMineCount[index]}    \r\n                            </span>\r\n                        );\r\n                    }\r\n                }\r\n                row.push(<div\r\n                          className={`mine-sweeper-item ${this.state.openStatus[index]?'is-open':''}`}\r\n                          key={j}\r\n                          onClick={()=>this.handleClickLeft(i,j)}\r\n                          onContextMenu={(e)=>this.handleClickRight(i,j)}\r\n                \r\n                >\r\n                    {icon}\r\n\r\n                </div>\r\n                    \r\n                )\r\n\r\n            }\r\n            mines.push(\r\n                <div className=\"mine-sweeper-row\" key={i}>\r\n                    {row}\r\n                </div>\r\n            )\r\n        }\r\n        return(\r\n            <div className=\"mine-sweeper-container\"\r\n             onContextMenu={this.handleContextMenu}\r\n            >\r\n              {mines}\r\n            </div>\r\n        )\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"app-section game-container\" >\r\n            {this.renderMines()}\r\n            <div className=\"panel-container\">\r\n                <div className=\"panel-data-container\">\r\n                <i className=\"iconfont icon-qizi2\"></i>\r\n                    <div>\r\n                        {this.state.selectedMineCount} / { this.props.mineCount }\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        className=\"mine-sweeper-button\"\r\n                        onClick={this.reStart}\r\n                    >\r\n                        重开一局\r\n                    </button>\r\n\r\n                    <button\r\n                        className=\"mine-sweeper-button\"\r\n                        style= {panelButton2Style}\r\n                        onClick={this.selectDifficulty}\r\n                    >\r\n                        改变难度\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n\r\n}","import React ,{useState}from 'react';\nimport SelectDifficulty from './components/SelectDifficulty'\nimport MineSweeper from './components/MineSweeper'\nimport './App.css';\n\n\n function App() {\n const [isShowGame,setIsShowGame] = useState(false);\n const [width,setWidth] = useState(0);\n const [height,setHeight] = useState(0);\n const [mineCount,setmineCount]=useState(0);\n function showGame(width:number,height:number,mineCount:number):void{\n   setIsShowGame(true);\n   setWidth(width);\n   setHeight(height);\n   setmineCount(mineCount)\n }\n function selectDifficulty():void{\n   setIsShowGame(false);\n }\n  return (\n    <div className=\"app\">\n      <div className={`app-main ${isShowGame?'show-game':''}`}>\n           <SelectDifficulty\n           showGame ={showGame}\n             ></SelectDifficulty>\n           <MineSweeper\n            selectDifficulty ={selectDifficulty}\n            play = {isShowGame}\n            width ={width}\n            height = {height}\n            mineCount = {mineCount}\n           \n           />\n            \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/common.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}